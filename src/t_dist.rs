const SIG_LEVEL_COUNT: usize = 6;
const DF_MAX: usize = 100;
const DF_COUNT: usize = DF_MAX + 1;

static T_DIST_CRIT: [[f64; SIG_LEVEL_COUNT]; DF_COUNT] = [
    [1.282, 1.645, 1.960, 2.326, 2.576, 3.090],  // Appx. normal as d.f. → ∞
    [6.3138, 12.7062, 25.4517, 63.6567, 127.3213, 636.6192],
    [2.9200, 4.3027, 6.2053, 9.9248, 14.0890, 31.5991],
    [2.3534, 3.1824, 4.1765, 5.8409, 7.4533, 12.9240],
    [2.1318, 2.7764, 3.4954, 4.6041, 5.5976, 8.6103],
    [2.0150, 2.5706, 3.1634, 4.0321, 4.7733, 6.8688],
    [1.9432, 2.4469, 2.9687, 3.7074, 4.3168, 5.9588],
    [1.8946, 2.3646, 2.8412, 3.4995, 4.0293, 5.4079],
    [1.8595, 2.3060, 2.7515, 3.3554, 3.8325, 5.0413],
    [1.8331, 2.2622, 2.6850, 3.2498, 3.6897, 4.7809],
    [1.8125, 2.2281, 2.6338, 3.1693, 3.5814, 4.5869],
    [1.7959, 2.2010, 2.5931, 3.1058, 3.4966, 4.4370],
    [1.7823, 2.1788, 2.5600, 3.0545, 3.4284, 4.3178],
    [1.7709, 2.1604, 2.5326, 3.0123, 3.3725, 4.2208],
    [1.7613, 2.1448, 2.5096, 2.9768, 3.3257, 4.1405],
    [1.7531, 2.1314, 2.4899, 2.9467, 3.2860, 4.0728],
    [1.7459, 2.1199, 2.4729, 2.9208, 3.2520, 4.0150],
    [1.7396, 2.1098, 2.4581, 2.8982, 3.2224, 3.9651],
    [1.7341, 2.1009, 2.4450, 2.8784, 3.1966, 3.9216],
    [1.7291, 2.0930, 2.4334, 2.8609, 3.1737, 3.8834],
    [1.7247, 2.0860, 2.4231, 2.8453, 3.1534, 3.8495],
    [1.7207, 2.0796, 2.4138, 2.8314, 3.1352, 3.8193],
    [1.7171, 2.0739, 2.4055, 2.8188, 3.1188, 3.7921],
    [1.7139, 2.0687, 2.3979, 2.8073, 3.1040, 3.7676],
    [1.7109, 2.0639, 2.3909, 2.7969, 3.0905, 3.7454],
    [1.7081, 2.0595, 2.3846, 2.7874, 3.0782, 3.7251],
    [1.7056, 2.0555, 2.3788, 2.7787, 3.0669, 3.7066],
    [1.7033, 2.0518, 2.3734, 2.7707, 3.0565, 3.6896],
    [1.7011, 2.0484, 2.3685, 2.7633, 3.0469, 3.6739],
    [1.6991, 2.0452, 2.3638, 2.7564, 3.0380, 3.6594],
    [1.6973, 2.0423, 2.3596, 2.7500, 3.0298, 3.6460],
    [1.6955, 2.0395, 2.3556, 2.7440, 3.0221, 3.6335],
    [1.6939, 2.0369, 2.3518, 2.7385, 3.0149, 3.6218],
    [1.6924, 2.0345, 2.3483, 2.7333, 3.0082, 3.6109],
    [1.6909, 2.0322, 2.3451, 2.7284, 3.0020, 3.6007],
    [1.6896, 2.0301, 2.3420, 2.7238, 2.9960, 3.5911],
    [1.6883, 2.0281, 2.3391, 2.7195, 2.9905, 3.5821],
    [1.6871, 2.0262, 2.3363, 2.7154, 2.9852, 3.5737],
    [1.6860, 2.0244, 2.3337, 2.7116, 2.9803, 3.5657],
    [1.6849, 2.0227, 2.3313, 2.7079, 2.9756, 3.5581],
    [1.6839, 2.0211, 2.3289, 2.7045, 2.9712, 3.5510],
    [1.6829, 2.0195, 2.3267, 2.7012, 2.9670, 3.5442],
    [1.6820, 2.0181, 2.3246, 2.6981, 2.9630, 3.5377],
    [1.6811, 2.0167, 2.3226, 2.6951, 2.9592, 3.5316],
    [1.6802, 2.0154, 2.3207, 2.6923, 2.9555, 3.5258],
    [1.6794, 2.0141, 2.3189, 2.6896, 2.9521, 3.5203],
    [1.6787, 2.0129, 2.3172, 2.6870, 2.9488, 3.5150],
    [1.6779, 2.0117, 2.3155, 2.6846, 2.9456, 3.5099],
    [1.6772, 2.0106, 2.3139, 2.6822, 2.9426, 3.5051],
    [1.6766, 2.0096, 2.3124, 2.6800, 2.9397, 3.5004],
    [1.6759, 2.0086, 2.3109, 2.6778, 2.9370, 3.4960],
    [1.6753, 2.0076, 2.3095, 2.6757, 2.9343, 3.4918],
    [1.6747, 2.0066, 2.3082, 2.6737, 2.9318, 3.4877],
    [1.6741, 2.0057, 2.3069, 2.6718, 2.9293, 3.4838],
    [1.6736, 2.0049, 2.3056, 2.6700, 2.9270, 3.4800],
    [1.6730, 2.0040, 2.3044, 2.6682, 2.9247, 3.4764],
    [1.6725, 2.0032, 2.3033, 2.6665, 2.9225, 3.4729],
    [1.6720, 2.0025, 2.3022, 2.6649, 2.9204, 3.4696],
    [1.6716, 2.0017, 2.3011, 2.6633, 2.9184, 3.4663],
    [1.6711, 2.0010, 2.3000, 2.6618, 2.9164, 3.4632],
    [1.6706, 2.0003, 2.2990, 2.6603, 2.9146, 3.4602],
    [1.6702, 1.9996, 2.2981, 2.6589, 2.9127, 3.4573],
    [1.6698, 1.9990, 2.2971, 2.6575, 2.9110, 3.4545],
    [1.6694, 1.9983, 2.2962, 2.6561, 2.9093, 3.4518],
    [1.6690, 1.9977, 2.2954, 2.6549, 2.9076, 3.4491],
    [1.6686, 1.9971, 2.2945, 2.6536, 2.9060, 3.4466],
    [1.6683, 1.9966, 2.2937, 2.6524, 2.9045, 3.4441],
    [1.6679, 1.9960, 2.2929, 2.6512, 2.9030, 3.4417],
    [1.6676, 1.9955, 2.2921, 2.6501, 2.9015, 3.4394],
    [1.6672, 1.9949, 2.2914, 2.6490, 2.9001, 3.4372],
    [1.6669, 1.9944, 2.2906, 2.6479, 2.8987, 3.4350],
    [1.6666, 1.9939, 2.2899, 2.6469, 2.8974, 3.4329],
    [1.6663, 1.9935, 2.2892, 2.6459, 2.8961, 3.4308],
    [1.6660, 1.9930, 2.2886, 2.6449, 2.8949, 3.4289],
    [1.6657, 1.9925, 2.2879, 2.6439, 2.8936, 3.4269],
    [1.6654, 1.9921, 2.2873, 2.6430, 2.8924, 3.4250],
    [1.6652, 1.9917, 2.2867, 2.6421, 2.8913, 3.4232],
    [1.6649, 1.9913, 2.2861, 2.6412, 2.8902, 3.4214],
    [1.6646, 1.9908, 2.2855, 2.6403, 2.8891, 3.4197],
    [1.6644, 1.9905, 2.2849, 2.6395, 2.8880, 3.4180],
    [1.6641, 1.9901, 2.2844, 2.6387, 2.8870, 3.4163],
    [1.6639, 1.9897, 2.2838, 2.6379, 2.8860, 3.4147],
    [1.6636, 1.9893, 2.2833, 2.6371, 2.8850, 3.4132],
    [1.6634, 1.9890, 2.2828, 2.6364, 2.8840, 3.4116],
    [1.6632, 1.9886, 2.2823, 2.6356, 2.8831, 3.4102],
    [1.6630, 1.9883, 2.2818, 2.6349, 2.8822, 3.4087],
    [1.6628, 1.9879, 2.2813, 2.6342, 2.8813, 3.4073],
    [1.6626, 1.9876, 2.2809, 2.6335, 2.8804, 3.4059],
    [1.6624, 1.9873, 2.2804, 2.6329, 2.8795, 3.4045],
    [1.6622, 1.9870, 2.2800, 2.6322, 2.8787, 3.4032],
    [1.6620, 1.9867, 2.2795, 2.6316, 2.8779, 3.4019],
    [1.6618, 1.9864, 2.2791, 2.6309, 2.8771, 3.4007],
    [1.6616, 1.9861, 2.2787, 2.6303, 2.8763, 3.3994],
    [1.6614, 1.9858, 2.2783, 2.6297, 2.8755, 3.3982],
    [1.6612, 1.9855, 2.2779, 2.6291, 2.8748, 3.3971],
    [1.6611, 1.9853, 2.2775, 2.6286, 2.8741, 3.3959],
    [1.6609, 1.9850, 2.2771, 2.6280, 2.8734, 3.3948],
    [1.6607, 1.9847, 2.2767, 2.6275, 2.8727, 3.3937],
    [1.6606, 1.9845, 2.2764, 2.6269, 2.8720, 3.3926],
    [1.6604, 1.9842, 2.2760, 2.6264, 2.8713, 3.3915],
    [1.6602, 1.9840, 2.2757, 2.6259, 2.8707, 3.3905],
];


#[derive(Debug, Clone, Copy)]
pub enum SigLevel {
    Alpha001,
    Alpha005,
    Alpha010,
    Alpha025,
    Alpha050,
    Alpha100,
}

impl SigLevel {
    fn to_index(&self) -> usize {
        match *self {
            SigLevel::Alpha001 => 5,
            SigLevel::Alpha005 => 4,
            SigLevel::Alpha010 => 3,
            SigLevel::Alpha025 => 2,
            SigLevel::Alpha050 => 1,
            SigLevel::Alpha100 => 0,
        }
    }

    pub fn to_f64(&self) -> f64 {
        match *self {
            SigLevel::Alpha001 => 0.001,
            SigLevel::Alpha005 => 0.005,
            SigLevel::Alpha010 => 0.010,
            SigLevel::Alpha025 => 0.025,
            SigLevel::Alpha050 => 0.050,
            SigLevel::Alpha100 => 0.100,
        }
    }
}

pub fn t_critical_value_2_sided(df: usize, alpha: SigLevel) -> f64 {
    let df_index = if df > DF_MAX { 0 } else { df };

    T_DIST_CRIT[df_index][alpha.to_index()]
}
